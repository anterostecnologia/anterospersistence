- Tamanho do nome da PK criado junto com a tabela está ultrapassando tamanho máximo no oracle.

- Tamanho do nome da tabela no oracle gerando mais que o máximo

- Não encontrou @INDEX classe herdada 
     @Index(name="PESSOA_CNPJ", columnNames={"CNPJ"})
     public class PessoaJuridica extends AbstractPessoa {
    
 - Problema com classe herdada gerando errado RegraTributariaGeral
 
- Criar OneToOne bidirecional associado ao ForeignKey
   public class User {
       ...
       @OneToOne (mappedBy="user")
       private UserPicture userPicture;
       ...
   }

   public class UserPicture {
       ...
       @OneToOne
       @JoinColumn (name="user")
       private User user;
       ...
   }

- Concluir implementação MappedSuperClass     
  ver link http://www.concretepage.com/hibernate/example-mappedsuperclass-hibernate 

- Implementar anotações @Embeddable, @Embedded, @AttributeOverride e @AttributeOverrides.
  Ver link http://www.concretepage.com/hibernate/example-embeddedid-hibernate
           http://www.java2s.com/Tutorial/Java/0355__JPA/AttributeOverridesForEmbeddableID.htm
           http://www.programmingforfuture.com/2013/02/attributeoverrides-annotation-in.html

- Implementar FlushMode o que irá permitir definir se é necessário usar save ou as entidades serão salvas automaticamentes no flush ou commit da session.

- Implementar nas anotações para verificar quando salvar
   boolean insertable() default true;
   boolean updatable() default true;   

- Internacionalização de Log's

- Permitir consultas com Query By Example

- Fazer internacionalização das mensagens - EM ANDAMENTO (Já definido como fazer)

- Implementar Integração com JAX-RS, JAXB, JEE, JERSEY

- Implementar Integração Guice.

- Implementar tela de Manutenção dos Objetos de Segurança na WEB.

- Implementar Projetos de Exemplo usando HTML5/JavaScript, Angular, Vaadin, SpringMVC, VRaptor, Android, Delphi.

- Implementar Ações que possam ser disparados via REST.

- Plugin para executar SQL's, gerar schemas e engenharia reversa

- Fazer Schema gerar alterações nos campos tipo not null alterado ou tamanho do campo maior.

[generate-entities] - Generate entities from a database.

[OPTIONS]
[--table] - Table pattern to include. 'CUSTOMER' for specific table, 'CUST' for substring match and '' for all (the default)
[--schema] - Schema pattern to include. Same syntax as for table
[--catalog] - Catalog pattern to include. Same syntax as for table
[--entityPackage] - Package to use for generated entities.
[--driver] - Class name for JDBC driver
[--url] - URL for JDBC connection
[--user] - Username for JDBC connection
[--password] - Password for JDBC connection
[--detectManyToMany] - Detect many to many associations between tables.
[--detectOneToOne] - Detect one-to-one associations between tables.
[--detectOptimisticLock] - Detect optimistic locking tables, i.e. if a table has a column named 'version' with a numeric type optimistic locking will be setup for that table.

OK - Criar anotações para compatibilidade OneToOne, OneToMany e ManyToMany.

OK - Fazer MultiSelect na query

OK - Forma de fazer paginação de objetos usando ScrollableResultSet,

OK - Join Table anotação bidirecional. Utilizar mappedBy, para não ser necessario anotação de ambos lados;

OK - Join table anotação bidirecional para o ManyToMany , ex:   @ManyToMany(mappedBy="notebooks")
                                                             private List pessoas;
OK - Testar OSql e usar

OK - Forma de fazer paginação de objetos setFirst, setMaxResults

OK - Possibilidade de trabalhar as classes do Joda Time e novos tipos de data Java 8

OK - Terminar implementação de Convert

OK - Implementar comandos sql para sugestão de indices

OK - Qdo usar anotação @ForeignKey e não usar @Column ou @Columns usar as colunas da Classe estrangeira. Pra isso será necessário garantir
  que esta classe já tenha sido lida.
  
OK - Colunas usadas em fields com anotação @ForeignKey devem ser obrigatoriamente ID's na outra classe
   Para não permitir que ocorra este tipo de erro, onde foi usado um atributo que não era ID:
   @ForeignKey
	@Column(name = "ID_FORNECEDOR", inversedColumn = "ID_PESSOA")
	private Fornecedor fornecedor;
   Deveria ser ID_PESSOA_PAPEL mas como havia a coluna na outra classe não deu erro e só foi gerar o erro na hora
   da geração do script.
   
OK - Corrigir problema no relacionamento ONY_TO_MANY com EAGER, o framework tenta buscar a lista antes de adicionar o objeto pai ao cache. 
    Obs: O problema era o tamanho do cache de objetos, muito pequeno.
  
OK - Implementar estratégias de Lock

OK - Integração com API de Validação do JAVA

OK - Fazer LOB carregar com lazy

OK - Implementar limit para trazer registros
   Obs: Implementado junto com DSL.
   


- Ver possibilidade de implementar @SecondaryTables, @SecondaryTable: Ver exemplo MovimentoEstoque x MovimentoEstoqueValor
 sendo que a segunda tabela seria a de valor.

   @Entity 
@IdClass(EmployeeId.class)
@SecondaryTables({
  @SecondaryTable(name="EMP_Photo", pkJoinColumns={
      @PrimaryKeyJoinColumn(name="EMP_Name", referencedColumnName="name"),
      @PrimaryKeyJoinColumn(name="EMP_ID", referencedColumnName="ID")}),  
  @SecondaryTable(name="EMP_LOB", pkJoinColumns={
      @PrimaryKeyJoinColumn(name="EMP_Name", referencedColumnName="name"),
      @PrimaryKeyJoinColumn(name="ID", referencedColumnName="ID")})
})
public class Employee {

    @Id
    private int id;
    @Id
    private String name;

    @Basic(fetch=FetchType.LAZY)
    @Lob
    @Column(table="EMP_Photo")
    private byte[] photo;
    
    @Basic(fetch=FetchType.LAZY)
    @Lob
    @Column(table="EMP_LOB")
    private char[] comments;
    
    
    obs: ver link  http://www.java2s.com/Tutorial/Java/0355__JPA/OneEntityWithTwoSecondaryTables.htm




- Fazer Log só para estatisticas de tempo de sql e de parser de objetos no handler

OK - Fazer Refresh na Session para permitir atualizar o objeto pela chave primária

- Criar eventos para permitir integração com view no caso aplicações desktop

- Estratégia Herança Table per Class
  ver link http://www.devmedia.com.br/tipos-de-heranca-no-hibernate/28641

OK - Não vai ser feito - Fazer opção de alterar configurações de um dialeto tipo:
   final DSLContext dsl = DSL.using(
            connection,
            SQLDialect.MYSQL,
            new Settings()
                .withRenderFormatted(true)
                .withRenderNameStyle(RenderNameStyle.AS_IS)
                .withRenderKeywordStyle(RenderKeywordStyle.UPPER)
                .withRenderSchema(false)
        );


  

@Entity 
public class Pessoa { 
    @Id private long id; 
    private String nome; 
    @Embedded private Endereco endereco; 
    //get's e set's 
} 
    
@Embeddable 
public class Endereco { 
   private String logradouro; 
   //get's e set's 
} 

Leia mais em: Hibernate Mapping: Mapeando Relacionamentos entre Entidades http://www.devmedia.com.br/hibernate-mapping-mapeando-relacionamentos-entre-entidades/29445#ixzz3M9MyDt8O 

OK - Gerar valores padrões para colunas de Entidades que não foram anotadas permitindo assim definir o mínimo possível de configurações para persistir um objeto. 
  Ex. Anotando apenas @Entity deveria conseguir salvar o objeto

OK - Terminar validação das referencedColumn no cacheManager
 
 - Implementar métodos de callback:
    PrePersist: Disparado quandoumobjeto novo é persistido através da operação persist() ou merge()
                dos EntityManagers. Esse evento tambémé disparado para os objetos persistidos em cascata.
    PostPersist: Disparado durante a execução de uma sincronização, após a operação insert correspondente
                 ao objeto que foi persistido. Um rollback na trasanção corrente pode desfazer a
                 operação insert, mas não o evento.
    PreRemove: Disparado quando um objeto gerenciado é removido através da operação remove()
               dos EntityManagers. Esse evento também é disparado para os objetos removidos em cascata.
    PostRemove: Disparado durante a execução de uma sincronização, após a operação delete correspondente
                ao objeto que foi removido. Um rollback na transação corrente pode desfazer a
                operação delete, mas não o evento.
    PreUpdate: Disparado durante a execução de uma sincronização, antes da operação update correspondente
               ao objeto que foi alterado.
    PostUpdate: Disparado durante a execução de uma sincronização, após a operação update correspondente
                ao objeto que foi alterado. Umrollback na transanção corrente pode desfazer a operação
                update, mas não o evento.
    PostLoad: Disparado depois que uma instância de uma entidade foi carregada com os dados do
              banco de dados.
              
              
OK - Implementar validação de campos requeridos em heranças das entidades no modo "single table".
              
OK - Não permitir 2 entidades com mesmo nome de tabela         

              
BUGS:

OK - Agora assume o padrão caso não seja informado.
1) Tipo enum sem enumerated
@Column(name="FINALIDADE", length=15, required=true)
FinalidadeConta finalidadeConta;


OK - Agora assume o padrão caso não seja informado.
2) Entidade sem foreignkey
  * Usuario do sistema do colaborador
  */
 @Column(name = "ID_USUARIO_COLABORADOR", inversedColumn = "ID_SEGURANCA")
 private Usuario usuarioSistema;
 
OK - Agora assume o padrão caso não seja informado. 
@Column(name="ID_ESTRUTURACARGOITEMPAI")
private EstruturaCargoItem cargoPai;


  * Tipo de Referência Comercial Ex.: Pessoal, Comercial e Banc ria
  */
OK - Agora assume o padrão caso não seja informado.
@Column(name = "TP_REFERENCIA_COMERCIAL", length = 15, required = true)
 private TipoReferenciaComercial tipoReferenciaComercial;
 
OK - Agora assume o padrão caso não seja informado.
@Column(name = "ID_PESSOA_CLIENTE", inversedColumn = "ID_PESSOA", required = true)
 private Pessoa pessoaCliente;     
 
OK - 3) Gerando "default" errado quando o BooleanType é omitido.
 	@BooleanValue(trueValue = "S", falseValue = "N")
	@Column(name = "BO_LIDO", required = true, defaultValue = "'N'")
	private Boolean lido;         
	
	
	
	
	

	http://pt.slideshare.net/ElvisRocha/java-ee-6-31342044
	
