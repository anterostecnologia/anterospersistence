/*******************************************************************************
 * Copyright 2012 Anteros Tecnologia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package br.com.anteros.persistence.sql.statement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import br.com.anteros.persistence.parameter.NamedParameter;
import br.com.anteros.persistence.parameter.NamedParameterParserResult;
import br.com.anteros.persistence.parameter.SubstitutedParameter;
import br.com.anteros.persistence.sql.binder.ParameterBinding;

/**
 * 
 * @author Edson Martins - Anteros
 *
 */
public class NamedParameterStatement {
	private final PreparedStatement statement;

	private final Map<?, ?> indexMap;

	public NamedParameterStatement(Connection connection, String query, NamedParameter[] params) throws SQLException {

		NamedParameterParserResult result = parse(query, params);
		indexMap = result.getParsedParams();
		statement = connection.prepareStatement(result.getParsedSql());
	}

	public NamedParameterStatement(Connection connection, String query, NamedParameter[] params, int autoGeneratedKeys)
			throws SQLException {

		NamedParameterParserResult result = parse(query, params);
		indexMap = result.getParsedParams();
		statement = connection.prepareStatement(result.getParsedSql(), autoGeneratedKeys);
	}

	public static final NamedParameterParserResult parse(String query, NamedParameter[] substitutedParams) {
		NamedParameterParserResult result = new NamedParameterParserResult();
		int length = query.length();
		StringBuffer parsedQuery = new StringBuffer();
		boolean inSingleQuote = false;
		boolean inDoubleQuote = false;
		int index = 1;
		String substParam = null;

		for (int i = 0; i < length; i++) {
			char c = query.charAt(i);
			if (inSingleQuote) {
				if (c == '\'') {
					inSingleQuote = false;
				}
			} else if (inDoubleQuote) {
				if (c == '"') {
					inDoubleQuote = false;
				}
			} else {
				if (c == '\'') {
					inSingleQuote = true;
				} else if (c == '"') {
					inDoubleQuote = true;
				} else if (c == ':' && i + 1 < length && Character.isJavaIdentifierStart(query.charAt(i + 1))) {
					int j = i + 2;
					while (j < length && Character.isJavaIdentifierPart(query.charAt(j))) {
						j++;
					}
					String name = query.substring(i + 1, j);
					SubstitutedParameter param = getSubstitutedParameter(substitutedParams, name);
					if (param != null) {
						substParam = param.toString();
						i += name.length();
					} else {
						c = '?';
						i += name.length();
						List<Integer> indexList = (List<Integer>) result.getParsedParams().get(name);
						if (indexList == null) {
							indexList = new LinkedList<Integer>();
							result.getParsedParams().put(name, indexList);
						}
						indexList.add(new Integer(index));

						index++;
					}
				}
			}
			if (substParam != null)
				parsedQuery.append(substParam);
			else
				parsedQuery.append(c);
			substParam = null;
		}

		for (Iterator<?> itr = result.getParsedParams().entrySet().iterator(); itr.hasNext();) {
			Map.Entry entry = (Map.Entry) itr.next();
			List list = (List) entry.getValue();
			int[] indexes = new int[list.size()];
			int i = 0;
			for (Iterator itr2 = list.iterator(); itr2.hasNext();) {
				Integer x = (Integer) itr2.next();
				indexes[i++] = x.intValue();
			}
			entry.setValue(indexes);
		}

		result.setParsedSql(parsedQuery.toString());
		return result;
	}

	private static SubstitutedParameter getSubstitutedParameter(NamedParameter[] params, String paramName) {
		if (params != null) {
			for (NamedParameter param : params) {
				if ((param.getName().equals(paramName)) && (param instanceof SubstitutedParameter))
					return (SubstitutedParameter) param;
			}
		}
		return null;
	}

	private int[] getIndexes(String name) {
		int[] indexes = (int[]) indexMap.get(name);
		if (indexes == null) {
			throw new IllegalArgumentException("Parameter not found: " + name);
		}
		return indexes;
	}

	public void setObject(String name, Object value) throws Exception {
		int[] indexes = getIndexes(name);
		for (int i = 0; i < indexes.length; i++) {
			setParameterValueStatement(statement, value, indexes[i]);
		}
	}

	private void setParameterValueStatement(PreparedStatement stmt, Object parameter, int parameterIndex)
			throws Exception {
		if (parameter instanceof ParameterBinding) {
			((ParameterBinding) parameter).bindValue(statement, parameterIndex);
		} else
			stmt.setObject(parameterIndex, parameter);
	}

	public void setString(String name, String value) throws SQLException {
		int[] indexes = getIndexes(name);
		for (int i = 0; i < indexes.length; i++) {
			statement.setString(indexes[i], value);
		}
	}

	public void setInt(String name, int value) throws SQLException {
		int[] indexes = getIndexes(name);
		for (int i = 0; i < indexes.length; i++) {
			statement.setInt(indexes[i], value);
		}
	}

	public void setLong(String name, long value) throws SQLException {
		int[] indexes = getIndexes(name);
		for (int i = 0; i < indexes.length; i++) {
			statement.setLong(indexes[i], value);
		}
	}

	public void setTimestamp(String name, Timestamp value) throws SQLException {
		int[] indexes = getIndexes(name);
		for (int i = 0; i < indexes.length; i++) {
			statement.setTimestamp(indexes[i], value);
		}
	}

	public PreparedStatement getStatement() {
		return statement;
	}

	public boolean execute() throws SQLException {
		return statement.execute();
	}

	public ResultSet executeQuery() throws SQLException {
		return statement.executeQuery();
	}

	public int executeUpdate() throws SQLException {
		return statement.executeUpdate();
	}

	public void close() throws SQLException {
		statement.close();
	}

	public void addBatch() throws SQLException {
		statement.addBatch();
	}

	public int[] executeBatch() throws SQLException {
		return statement.executeBatch();
	}
}
